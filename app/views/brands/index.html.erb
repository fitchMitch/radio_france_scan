<%#
  GraphQL fragments are defined in the templates themselves.

  All data being used directly in this template should also be reflected
  statically in the fragment. And vice versa, all fields in the query fragment
  should only be used directly in this template. You MUST keep static queries
  and runtime usage in sync. Defining queries in the same file makes
  this aspect easier to manage.
%>
<%graphql
  # Fragments are parts of queries, they can't be executed themselves.
  # This fragment is defined on the User type and is named "Viewer". You can
  # name the fragment whatever you'd like. Its the name that is exported as
  # a Ruby constant, so it must start with a capital letter.
  #
  # Its exported as "Views::Brands::Index::Viewer". The module path to
  # the tempate then the name of the fragment.
  fragment Viewer on User {
    # Initially, fetch the first 10 brands. We'll show a "load more"
    # button to demostrate GraphQL connection cursors.
    brands(first: 5) {
      # The only data we're using directly in this template is the total number
      # of brands. Also note that its camelcase here.
      totalCount

      # Include data dependencies of app/views/brands/_brands.html.erb
      # All renders in this template will map to a fragment spread to
      # statically define the view composition relationship.
      # ...Views::Brands::Brands::BrandConnection
    }
  }
%>
<%#
  The first step of any GraphQL defined view is to cast arguments to the locally
  defined fragment result wrapper. In a statically typed langauge, you can think
  of it as passing a concrete type into a function that accepts an interface.

    def brands_index(viewer: Views::Brands::Index::Viewer)

  The wrapper serves two primary roles:

  1. Provides Ruby friendly snake case accessors for accessing the underlying data
  2. Only expose fields explicitly defined by this fragment.
     `viewer.brands` is a full set of data, but only `total_count` is
     exposed to this template since thats all we explicitly defined.
%>
<!-- <--% brands = Views::Brands::Index::Viewer.new(brands) %> -->

<h2>
  Chaines de Radio France: <span class="badge"><%= brands.size %></span>
</h2>
<div class="brands">
  <ul class="list-group">
    <% brands.each do |brand| %>
      <%= render 'brands/brand_item', brand: brand %>
    <%end%>
  </ul>
</div>
