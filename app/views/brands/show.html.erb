<%#
  GraphQL fragments are defined in the templates themselves.

  All data being used directly in this template should also be reflected
  statically in the fragment. And vice versa, all fields in the query fragment
  should only be used directly in this template. You MUST keep static queries
  and runtime usage in sync. Defining queries in the same file makes
  this aspect easier to manage.
%>
<%graphql
  # Fragments are parts of queries, they can't be executed themselves.
  # This fragment is defined on the Brand type and is coincidentally named
  # "Brand". You can name the fragment whatever you'd like. Its the name
  # that is exported as a Ruby constant, so it must start with a capital letter.
  #
  # Its exported as "Views::Brands::Show::Brand". The module path to
  # the tempate then the name of the fragment.
  fragment Brand on Brand {
    # id is a GraphQL global id, not a database id
    # It is an opaque base64 identifier we can use to refetch the entity.
    id

    # owner is a User or Organization
    owner {
      login
    }

    # The brand's name
    name

    # Optional description text and homepage URL
    description
    homepageUrl

    # Include brands/_navigation.html.erb data dependencies
    ...Views::Brands::Navigation::Brand

    ...Views::Brands::Star::Brand
  }
%>
<%#
  The first step of any GraphQL defined view is to cast arguments to the locally
  defined fragment result wrapper. In a statically typed langauge, you can think
  of it as passing a concrete type into a function that accepts an interface.

    def brands_show(brand: Views::Brands::Show::Brand)

  The wrapper serves two primary roles:

  1. Provides Ruby friendly snake case accessors for accessing the underlying data
  2. Only expose fields explicitly defined by this fragment.
     `brand` is a full set of data, but fields included by the
     ...Views::Brands::Navigation::Brand spread are hidden.
%>
<% brand = Views::Brands::Show::Brand.new(brand) %>

<div class="header clearfix">
  <%= render "brands/navigation", brand: brand %>

  <h3 class="text-muted inline-block">
    <a href="<%= brands_path %>"><%= brand.owner.login %></a>
    /
    <a href="<%= brand_path(brand.id) %>"><%= brand.name %></a>
  </h3>

  <div class="inline-block star-badge-header">
    <%= render "brands/star", brand: brand %>
  </div>
</div>

<hr>

<div class="jumbotron">
  <h1><%= brand.name %></h1>

  <% if brand.description.present? %>
    <p><%= brand.description %></p>
  <% end %>

  <p>
    <%# NOTE: homepage_url is snake case here %>
    <% if brand.homepage_url.present? %>
      <a class="btn btn-primary btn-lg" href="<%= brand.homepage_url %>" role="button">Homepage</a>
    <% end %>

    <a class="btn btn-primary btn-lg" href="https://github.com/<%= brand.owner.login %>/<%= brand.name %>" role="button">View on RadioFranceScan</a>
  </p>
</div>
